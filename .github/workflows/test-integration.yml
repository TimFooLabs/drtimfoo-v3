name: Clerk Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_APP_URL: http://localhost:3000

jobs:
  # Unit and Integration Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit || echo "No unit tests configured"
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: coverage/
        retention-days: 7

  # CLI/Webhook Tests
  integration-tests:
    name: CLI & Webhook Tests
    runs-on: ubuntu-latest
    
    services:
      # Add any required services here (e.g., database)
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      run: |
        # Create test environment file
        cat > .env.test << EOF
        CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
        CLERK_WEBHOOK_SIGNING_SECRET=${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        NEXT_PUBLIC_CONVEX_URL=${{ secrets.CONVEX_URL }}
        CONVEX_DEPLOYMENT=${{ secrets.CONVEX_DEPLOYMENT }}
        EOF
        
    - name: Wait for services (if needed)
      run: |
        # Wait for any required services to be ready
        echo "Services ready"
        
    - name: Run CLI integration tests
      run: |
        # Make scripts executable
        chmod +x scripts/*.sh
        
        # Run user creation tests
        ./scripts/test-user-creation.sh create test-ci@example.com "CI" "Test" "testpass123"
        
        # Run webhook tests
        ./scripts/test-webhook.sh test user.created
        
        # Run verification tests
        ./scripts/verify-convex-data.sh verify
        
      env:
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        CLERK_WEBHOOK_SIGNING_SECRET: ${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}
        NEXT_PUBLIC_CONVEX_URL: ${{ secrets.CONVEX_URL }}
        
    - name: Run full test suite
      run: |
        ./scripts/run-full-test-suite.sh
      env:
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        CLERK_WEBHOOK_SIGNING_SECRET: ${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}
        NEXT_PUBLIC_CONVEX_URL: ${{ secrets.CONVEX_URL }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test-logs/
          test-data/
        retention-days: 7

  # Playwright E2E Tests
  playwright-tests:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Setup test environment
      run: |
        cat > .env.test << EOF
        CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        NEXT_PUBLIC_CONVEX_URL=${{ secrets.CONVEX_URL }}
        EOF
        
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: |
        npm start &
        sleep 10
        
    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Run Playwright tests
      run: npx playwright test
      env:
        CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
        NEXT_PUBLIC_CONVEX_URL: ${{ secrets.CONVEX_URL }}
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
        
    - name: Upload Playwright videos
      uses: actions/upload-artifact@v3
        if: always()
      with:
        name: playwright-videos
        path: test-results/
        retention-days: 7

  # Cypress E2E Tests
  cypress-tests:
    name: Cypress E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      run: |
        cat > .env.test << EOF
        CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        NEXT_PUBLIC_CONVEX_URL=${{ secrets.CONVEX_URL }}
        EOF
        
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: |
        npm start &
        sleep 10
        
    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Run Cypress tests
      run: npx cypress run --browser chrome
      env:
        CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
        NEXT_PUBLIC_CONVEX_URL: ${{ secrets.CONVEX_URL }}
        
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos/
        retention-days: 7
        
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-screenshots
        path: cypress/screenshots/
        retention-days: 7

  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run code quality checks
      run: |
        # Run linting
        npm run lint || echo "No lint script configured"
        
        # Run type checking
        npm run type-check || echo "No type-check script configured"
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.txt
        retention-days: 7

  # Deploy to Staging (on successful tests)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, playwright-tests, cypress-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to staging
      run: |
        # Add your deployment commands here
        echo "Deploying to staging environment..."
        # Example: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        
    - name: Run smoke tests
      run: |
        # Run basic smoke tests against staging
        echo "Running smoke tests..."
        # Add your smoke test commands here

  # Deploy to Production (on successful tests)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, playwright-tests, cypress-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to production
      run: |
        # Add your deployment commands here
        echo "Deploying to production environment..."
        # Example: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        
    - name: Run smoke tests
      run: |
        # Run basic smoke tests against production
        echo "Running smoke tests..."
        # Add your smoke test commands here
        
    - name: Notify deployment
      run: |
        # Add notification logic (Slack, email, etc.)
        echo "Deployment completed successfully"

  # Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, playwright-tests, cypress-tests, security-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add test results summary here
        echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Playwright Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.playwright-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Cypress Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.cypress-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.playwright-tests.result }}" == "success" && 
              "${{ needs.cypress-tests.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "## 🎉 All Tests Passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Some Tests Failed" >> $GITHUB_STEP_SUMMARY
        fi